
= サイト開発の準備


この章では、ラブライブ募集サイトの実装にあたって、どんなことを事前に準備していけばいいかを書いていきます。


== 必要なツールの準備


はじめに、ラブライブ募集サイトの実装で必要なツールを準備します。
最低限必要なものを列挙していくと以下のものがあります。

 * ソースコードを書くためのエディターもしくはIDE
 * 表示確認用のブラウザー
 * 作業履歴を記録するためのバージョン管理ソフト


これらについて、1つずつ説明していきます。


=== エディターやIDE


1つめに必要なものとして、ソースコードを書くためにエディターやIDE（統合開発環境）を用意します。
エディターはAtomやSublime Textがよく使われています。



IDEはWebStormやNetBeansがよく使われています。
またWindowsであればVisual Studio Community EditionがおすすめのIDEです。


=== ブラウザー


2つめに必要なものとして、作ったサイトの表示確認用にブラウザーを用意します。
WindowsやOS Xには次のブラウザーが最初からインストールされています。



しかし、これらのブラウザーだけではなく、複数ブラウザーで表示を確認する必要があります。
他にインストールしておいたほうが良いブラウザーはGoogle ChromeやMozilla Firefoxがあります。
できれば、開発版をインストールしておくと、事前に次期バージョンでハマりそうな点が分かるのでおすすめです。

 * Windows
 ** Edge、Internet Explorer
 * OS X
 ** Safari

=== GitとGitHub


3つめに必要なものとして、作業履歴を管理するためにGitとGitHubを用意します。
たとえば突然PCがブルースクリーンになってしまい、予期しないシャットダウンをしなければいけなくなったとします。



そのとき、適切に作業履歴を残すことで、かなり前の作業まで遡ってしまうことが少なくなります。
GitはSourceTreeをダウンロードして使うのが良いでしょう。もしGitについてあまり知らない場合は、拙著のSteins;Gitを読んでみてください。


== 分からないことがあった時には？


サイトの実装をしていくうちに、分からないところが出てくる場合もあります。
分からないこととして、たとえば「固有名詞が何を示すものなのか分からない」「必要とされている機能を実現する方法が分からない」「なぜエラーになるのか分からない」が挙げられます。
そういった際、どのように解決するかを書きます。


=== 検索する


まずは検索します。検索する方法にも結果が出やすい手法はいくつかあります。



まず1つめの手法として、たとえば@<tt>{CSSで背景色をつけるやり方}と検索するより、@<tt>{CSS 背景色 やり方}で検索するほうが検索結果の件数は増えます。
検索エンジンは@<tt>{CSSで背景色をつけるやり方}のような文章が苦手です。
そのため、文章よりも単語ごとに区切ったほうが検索結果の件数は増えます。



2つめの手法として、より入門的な内容を探したい場合、@<tt>{○○ とは}で検索するのが良いです。
理由は、入門的な記事のタイトルが@<tt>{○○ とは}と書く傾向にあるためです。
たとえばJavaScriptの初心者向け記事を探したい場合は@<tt>{JavaScript とは}といった感じで検索します。



3つめの手法として、JavaScriptでエラーメッセージが出力された場合、エラーメッセージをそのまま検索することです。
エラーメッセージをそのまま検索することで、解決方法が出てきやすいです。
しかし、だいたい英語（そしてほとんどStack Overflowというサイト）なので、そこは頑張って内容を読み取るしかないです。



4つめの手法として、Google検索結果内にある@<tt>{検索ツール - 期間指定}を使って、なるべく新しい情報のみ検索します。
CSSやJavaScriptは、2011年以前の情報があまり役に立ちません。
そのため、期間を絞ることで新しい情報にたどりつきやすくします。



しかし、初期状態では期間設定の使い勝手があまりよくありません。具体的には、期間設定が@<tt>{1ヶ月}の後は@<tt>{1年}となってしまうため、たとえば@<tt>{3ヶ月以内}などは指定できません。
これに関しては@<href>{https://chrome.google.com/webstore/detail/add-search-options/kaifgnoibnjldmdkkfogenbfbfgcbiao?hl=ja,Add Search Options}というGoogle Chrome拡張機能を使います。
この拡張機能を使うことにより、期間指定に@<tt>{3ヶ月以内}と@<tt>{6ヶ月以内}が増えます。


=== 周りの人に聞く


検索をしても、あまりいい情報に巡りあえない場合があります。そういった場合、周りに聞ける環境であれば聞くのがいいです。



聞く前に、まずは検索したり問題の概要をまとめます。これにより聞く側にとらせる時間が少なくなります。
聞き方としてはおそらく解答にかかるであろう時間を予測して、「『○○』について聞きたいのですが、×分ほど時間はありますか」と聞くのがいいです。
この「○○」に入る言葉は、たとえば「ある機能の実装方法」ということが入ると思います。



また、聞く相手を間違えないようにします。たとえば、プログラムのことを企画へに聞いても、ほとんどの場合は求める回答が返ってこないと思います。


== ライブラリ選定


ここまで、開発に必要なツールや開発の際に分からないことがあったときの対処法を書きました。
ここからは、今回のサイトを実装するにあたり必要な、CSSやJavaScriptのライブラリ選定をおこなっていきます。


=== ライブラリとは


その前に、ライブラリという聞き慣れない単語が出て「??」となった人もいるかもしれません。
なので、ライブラリについて説明します。



ライブラリとは、汎用性が高いプログラムを、他のプログラムからも使えるようにひとまとまりとしたものです。
たとえば、CSSであればBootstrapやFoundation、JavaScriptでいえばjQueryなどがライブラリです。
いまあなたが見ているこの文章も、自動的に日本語の文章をチェックする@<href>{https://github.com/textlint/textlint,textlint}というライブラリを使い、自動校正しながら書いています。


=== ライブラリを選ぶ基準


ライブラリについて説明したところで、自分がライブラリを選ぶ時の基準について、いくつか書いていきます。


==== 利用実績


1つめの基準として、そのライブラリが広く使われているかを見ます。
理由は、ライブラリを使う上で何か困って検索をしたときに情報が出てきやすいためです。



たとえばCSSのライブラリである@<href>{http://getbootstrap.com/,Bootstrap}だと、ページ下部にBootstrapを使ったサイト一覧が掲載されています。
またJavaScriptのライブラリである@<href>{http://jquery.com/,jQuery}は、@<href>{http://www.amazon.co.jp/s/field-keywords=jquery,Amazon上でjQueryで検索}すると、jQuery関連の本が大量に表示されます。



このように、利用実績やライブラリについて本が書かれているかということをまずは見ます。


==== Issue・Pull Request、そして最新コミット日時


2つめの基準として、GitHub上にあるIssueやPull Requestの件数と最新コミット日時です。
先ほどの利用実績で挙げた例は、公開されてからある程度時間が経過し、広く使われるようになったライブラリのみ使える判断材料です。
つまり定番と言われるライブラリに対してしか、判断材料として使えないということです。



そこで使える判断基準がIssueやPull Requestの件数と最新コミット日時です。
最新コミット日がたとえば6か月前だった場合、IssueやPull Requestの多さは「放置されているから」ということになります。
放置されたライブラリを使う場合、自分達でなんとかしないといけなくなる場面が増えてしまいます。



たとえば、放置されたライブラリに何らかのセキュリティ的な欠陥が見つかったとしても、自分達で対処しないといけません。
また、プログラミングの世界には変化がたびたび訪れます。
しかし放置されたライブラリを使い続けるのであれば、その変化にも自分達で対処しないといけません。


==== ソースコードの流れを把握しやすい


3つめの基準として、ソースコードが流れを把握しやすいか見ます。
理由は、何か困ったときにドキュメントを見るのですが、それでも解決できない場合はソースコードを読む必要があるためです。
そのときに、ソースコードの流れを把握できなかった場合、解決方法が見つからずつらくなります。



全体把握しやすいライブラリとしては、例えば@<href>{http://backbonejs.org/,Backbone.js}が挙げられます。
@<href>{https://github.com/jashkenas/backbone/blob/master/backbone.js,ソースコード}はまとまりの単位が小さいため、流れを追いやすいです。
また、ソースコードの行数も1,877行（2015/7/10現在）なので、全体を読もうと思えば読めます。


==== ドキュメントがそろっている


4つめの基準として、ライブラリにドキュメントがあり、かつ読みやすいかを見ます。もちろん両方そろっているのが好ましいです。
両方そろっている例としては、@<href>{http://hokaccha.github.io/js-flipsnap/,flipsnap.js}が挙げられます。



flipsnap.jsはドキュメントに次の項目がよくまとまっています。そのため、使い方に困らないライブラリとなっています。
また@<href>{https://github.com/hokaccha/js-flipsnap/blob/master/flipsnap.js,ソースコード自体}も、まとまりの単位が小さく読みやすいものとなっています。

 * どういった環境に対応しているか
 * どのような準備をすれば動作するようになるか
 * 使い方の例

== ライブラリの選定CSS編


ここまで、ライブラリ選定時の基準について書いてきました。ここからは、実際にライブラリ選定をしていきます。
まずはじめに、CSSのライブラリから選定していきます。



今回、CSSのライブラリは@<href>{https://github.com/twbs/bootstrap,Bootstrap}のテーマである、@<href>{http://kubosho.github.io/Nico/,Nico}を使います。



選定した理由としては、今回デザイナーがいない中、ラブライブ参加者募集サイトの見た目をアニメに近づけたいという思いがありました。
ラブライブ参加者募集サイトは、Bootstrapを使って作られたサイトの見た目に似ているため、Bootstrapを使うことにしました。



また、ラブライブ参加者募集サイトはピンク系の配色なのですが、Bootstrap本体はピンク系の配色ではありません。
なので、今回のために@<href>{http://honokak.osaka/,Honoka - 日本語も美しく表示できるBootstrapテーマ}というbootstrapのテーマを元にNicoというBootstrapを作りました。


== ライブラリの選定JavaScript編


次に、JavaScriptのライブラリを選定していきます。
今回JavaScript側で実装する機能として、カルーセルがあります。



カルーセルは、@<href>{http://www.nike.com/jp/ja_jp/,Nike} などで使われている「注目させたい複数の画像などをつぎつぎと横にスライド表示する」ものです。
このカルーセルを実現するためのライブラリは、@<href>{http://meandmax.github.io/lory/,lory}にします。



選定した理由は2つあります。
理由の1つめとして、外部ライブラリに依存せず、loryだけを読みこめばカルーセルの実装をおこなえることが挙げられます。
理由の2つめとして、loryは全体像が把握しやすいことです。
全体像が把握しやすいということは、何か困ったことがあってソースコードを読むときでもなんとかなるということです。



なお、カルーセルでの表示に無限ループがいらなければ@<href>{http://hokaccha.github.io/js-flipsnap/,flipsnap.js}もおすすめです。
また、jQueryに依存するライブラリでは@<href>{http://kenwheeler.github.io/slick/,slick}や、@<href>{http://owlgraphic.com/owlcarousel/,Owl Carousel}がよく使われます。



これで、ライブラリの選定が終わりました。次章からはサイトの実装をしていきます。

